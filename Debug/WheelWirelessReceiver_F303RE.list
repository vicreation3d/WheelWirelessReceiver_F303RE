
WheelWirelessReceiver_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c8  080059c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080059c8  080059c8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059c8  080059c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000002f4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e024  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026a2  00000000  00000000  0002e0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac8  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000082f  00000000  00000000  00031218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020386  00000000  00000000  00031a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010657  00000000  00000000  00051dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf0bf  00000000  00000000  00062424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000029ac  00000000  00000000  001214e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00123e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005968 	.word	0x08005968

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08005968 	.word	0x08005968

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80001da:	4b1a      	ldr	r3, [pc, #104]	; (8000244 <MX_DMA_Init+0x70>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a19      	ldr	r2, [pc, #100]	; (8000244 <MX_DMA_Init+0x70>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b17      	ldr	r3, [pc, #92]	; (8000244 <MX_DMA_Init+0x70>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <MX_DMA_Init+0x70>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <MX_DMA_Init+0x70>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6153      	str	r3, [r2, #20]
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <MX_DMA_Init+0x70>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	200e      	movs	r0, #14
 8000210:	f001 f9b1 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000214:	200e      	movs	r0, #14
 8000216:	f001 f9ca 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	200f      	movs	r0, #15
 8000220:	f001 f9a9 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000224:	200f      	movs	r0, #15
 8000226:	f001 f9c2 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800022a:	2200      	movs	r2, #0
 800022c:	2100      	movs	r1, #0
 800022e:	203c      	movs	r0, #60	; 0x3c
 8000230:	f001 f9a1 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000234:	203c      	movs	r0, #60	; 0x3c
 8000236:	f001 f9ba 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08a      	sub	sp, #40	; 0x28
 800024c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025e:	4b3c      	ldr	r3, [pc, #240]	; (8000350 <MX_GPIO_Init+0x108>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a3b      	ldr	r2, [pc, #236]	; (8000350 <MX_GPIO_Init+0x108>)
 8000264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000268:	6153      	str	r3, [r2, #20]
 800026a:	4b39      	ldr	r3, [pc, #228]	; (8000350 <MX_GPIO_Init+0x108>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000276:	4b36      	ldr	r3, [pc, #216]	; (8000350 <MX_GPIO_Init+0x108>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a35      	ldr	r2, [pc, #212]	; (8000350 <MX_GPIO_Init+0x108>)
 800027c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	4b33      	ldr	r3, [pc, #204]	; (8000350 <MX_GPIO_Init+0x108>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b30      	ldr	r3, [pc, #192]	; (8000350 <MX_GPIO_Init+0x108>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a2f      	ldr	r2, [pc, #188]	; (8000350 <MX_GPIO_Init+0x108>)
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b2d      	ldr	r3, [pc, #180]	; (8000350 <MX_GPIO_Init+0x108>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a6:	4b2a      	ldr	r3, [pc, #168]	; (8000350 <MX_GPIO_Init+0x108>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a29      	ldr	r2, [pc, #164]	; (8000350 <MX_GPIO_Init+0x108>)
 80002ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b27      	ldr	r3, [pc, #156]	; (8000350 <MX_GPIO_Init+0x108>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2120      	movs	r1, #32
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f001 fd45 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2106      	movs	r1, #6
 80002ce:	4821      	ldr	r0, [pc, #132]	; (8000354 <MX_GPIO_Init+0x10c>)
 80002d0:	f001 fd40 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	4619      	mov	r1, r3
 80002ea:	481b      	ldr	r0, [pc, #108]	; (8000358 <MX_GPIO_Init+0x110>)
 80002ec:	f001 fba8 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002f0:	2320      	movs	r3, #32
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f4:	2301      	movs	r3, #1
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030a:	f001 fb99 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CE_Pin|SPI2_CS_Pin;
 800030e:	2306      	movs	r3, #6
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031a:	2303      	movs	r3, #3
 800031c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	480b      	ldr	r0, [pc, #44]	; (8000354 <MX_GPIO_Init+0x10c>)
 8000326:	f001 fb8b 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800032a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_GPIO_Init+0x10c>)
 8000342:	f001 fb7d 	bl	8001a40 <HAL_GPIO_Init>

}
 8000346:	bf00      	nop
 8000348:	3728      	adds	r7, #40	; 0x28
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	48000400 	.word	0x48000400
 8000358:	48000800 	.word	0x48000800

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f000 ffa4 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f834 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000368:	f7ff ff6e 	bl	8000248 <MX_GPIO_Init>
  MX_DMA_Init();
 800036c:	f7ff ff32 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000370:	f000 fa68 	bl	8000844 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000374:	f000 f8be 	bl	80004f4 <MX_SPI2_Init>
  MX_UART4_Init();
 8000378:	f000 fa2c 	bl	80007d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 800037c:	f000 fcd8 	bl	8000d30 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 8000380:	210a      	movs	r1, #10
 8000382:	480f      	ldr	r0, [pc, #60]	; (80003c0 <main+0x64>)
 8000384:	f000 fcfb 	bl	8000d7e <NRF24_RxMode>
  NRF24_ReadAll(data);
 8000388:	480e      	ldr	r0, [pc, #56]	; (80003c4 <main+0x68>)
 800038a:	f000 fd81 	bl	8000e90 <NRF24_ReadAll>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (isDataAvailable(2) == 1)
 800038e:	2002      	movs	r0, #2
 8000390:	f000 fd34 	bl	8000dfc <isDataAvailable>
 8000394:	4603      	mov	r3, r0
 8000396:	2b01      	cmp	r3, #1
 8000398:	d10b      	bne.n	80003b2 <main+0x56>
	  {
		  NRF24_Receive(RxData);
 800039a:	480b      	ldr	r0, [pc, #44]	; (80003c8 <main+0x6c>)
 800039c:	f000 fd4e 	bl	8000e3c <NRF24_Receive>
		  convert8to16(RxData, output16);
 80003a0:	490a      	ldr	r1, [pc, #40]	; (80003cc <main+0x70>)
 80003a2:	4809      	ldr	r0, [pc, #36]	; (80003c8 <main+0x6c>)
 80003a4:	f000 f874 	bl	8000490 <convert8to16>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003a8:	2120      	movs	r1, #32
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f001 fce9 	bl	8001d84 <HAL_GPIO_TogglePin>
	  }

	  sendSbusChannels(output16);
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <main+0x70>)
 80003b4:	f000 ff66 	bl	8001284 <sendSbusChannels>
	  HAL_Delay(6);
 80003b8:	2006      	movs	r0, #6
 80003ba:	f000 ffdd 	bl	8001378 <HAL_Delay>
	  if (isDataAvailable(2) == 1)
 80003be:	e7e6      	b.n	800038e <main+0x32>
 80003c0:	20000000 	.word	0x20000000
 80003c4:	20000090 	.word	0x20000090
 80003c8:	20000030 	.word	0x20000030
 80003cc:	20000050 	.word	0x20000050

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b0a6      	sub	sp, #152	; 0x98
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003da:	2228      	movs	r2, #40	; 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f005 fa96 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2258      	movs	r2, #88	; 0x58
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f005 fa88 	bl	8005910 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000400:	2302      	movs	r3, #2
 8000402:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000404:	2301      	movs	r3, #1
 8000406:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000408:	2310      	movs	r3, #16
 800040a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	2302      	movs	r3, #2
 8000410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fcc2 	bl	8001db8 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800043a:	f000 f855 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2302      	movs	r3, #2
 8000444:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000454:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fd00 	bl	8002e60 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000466:	f000 f83f 	bl	80004e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 800046a:	230a      	movs	r3, #10
 800046c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4618      	mov	r0, r3
 800047a:	f002 ff11 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000484:	f000 f830 	bl	80004e8 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3798      	adds	r7, #152	; 0x98
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <convert8to16>:
        output8[2 * i] = (uint8_t)(input16[i] & 0x00FF);      // Dolny bajt
        output8[2 * i + 1] = (uint8_t)((input16[i] >> 8) & 0x00FF);  // Górny bajt
    }
}

void convert8to16(const uint8_t *input8, uint16_t *output16) {
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 16; ++i) {
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	e019      	b.n	80004d4 <convert8to16+0x44>
        output16[i] = (uint16_t)input8[2 * i] | ((uint16_t)input8[2 * i + 1] << 8);
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b21a      	sxth	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	3301      	adds	r3, #1
 80004b4:	6879      	ldr	r1, [r7, #4]
 80004b6:	440b      	add	r3, r1
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	021b      	lsls	r3, r3, #8
 80004bc:	b21b      	sxth	r3, r3
 80004be:	4313      	orrs	r3, r2
 80004c0:	b219      	sxth	r1, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	b28a      	uxth	r2, r1
 80004cc:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b0f      	cmp	r3, #15
 80004d8:	dde2      	ble.n	80004a0 <convert8to16+0x10>
    }
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x8>
	...

080004f4 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_SPI2_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_SPI2_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_SPI2_Init+0x74>)
 8000500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000504:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_SPI2_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_SPI2_Init+0x74>)
 800050e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000512:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_SPI2_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_SPI2_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_SPI2_Init+0x74>)
 8000522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000526:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_SPI2_Init+0x74>)
 800052a:	2210      	movs	r2, #16
 800052c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_SPI2_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_SPI2_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_SPI2_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_SPI2_Init+0x74>)
 8000542:	2207      	movs	r2, #7
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_SPI2_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_SPI2_Init+0x74>)
 800054e:	2208      	movs	r2, #8
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_SPI2_Init+0x74>)
 8000554:	f003 f8c2 	bl	80036dc <HAL_SPI_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800055e:	f7ff ffc3 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000c4 	.word	0x200000c4
 800056c:	40003800 	.word	0x40003800

08000570 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a41      	ldr	r2, [pc, #260]	; (8000694 <HAL_SPI_MspInit+0x124>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d17c      	bne.n	800068c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000592:	4b41      	ldr	r3, [pc, #260]	; (8000698 <HAL_SPI_MspInit+0x128>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a40      	ldr	r2, [pc, #256]	; (8000698 <HAL_SPI_MspInit+0x128>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <HAL_SPI_MspInit+0x128>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <HAL_SPI_MspInit+0x128>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a3a      	ldr	r2, [pc, #232]	; (8000698 <HAL_SPI_MspInit+0x128>)
 80005b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b38      	ldr	r3, [pc, #224]	; (8000698 <HAL_SPI_MspInit+0x128>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005d4:	2305      	movs	r3, #5
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	482f      	ldr	r0, [pc, #188]	; (800069c <HAL_SPI_MspInit+0x12c>)
 80005e0:	f001 fa2e 	bl	8001a40 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <HAL_SPI_MspInit+0x134>)
 80005e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000614:	4822      	ldr	r0, [pc, #136]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 8000616:	f000 ffe4 	bl	80015e2 <HAL_DMA_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000620:	f7ff ff62 	bl	80004e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 8000628:	659a      	str	r2, [r3, #88]	; 0x58
 800062a:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <HAL_SPI_MspInit+0x130>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000632:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <HAL_SPI_MspInit+0x13c>)
 8000634:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000638:	2210      	movs	r2, #16
 800063a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000660:	4811      	ldr	r0, [pc, #68]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000662:	f000 ffbe 	bl	80015e2 <HAL_DMA_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 800066c:	f7ff ff3c 	bl	80004e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000674:	655a      	str	r2, [r3, #84]	; 0x54
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <HAL_SPI_MspInit+0x138>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2024      	movs	r0, #36	; 0x24
 8000682:	f000 ff78 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000686:	2024      	movs	r0, #36	; 0x24
 8000688:	f000 ff91 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40003800 	.word	0x40003800
 8000698:	40021000 	.word	0x40021000
 800069c:	48000400 	.word	0x48000400
 80006a0:	20000128 	.word	0x20000128
 80006a4:	40020044 	.word	0x40020044
 80006a8:	2000016c 	.word	0x2000016c
 80006ac:	40020058 	.word	0x40020058

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x44>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_MspInit+0x44>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_MspInit+0x44>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x44>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x44>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x44>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006e6:	2007      	movs	r0, #7
 80006e8:	f000 ff3a 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 fdf8 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <DMA1_Channel4_IRQHandler+0x10>)
 8000752:	f001 f868 	bl	8001826 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000128 	.word	0x20000128

08000760 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <DMA1_Channel5_IRQHandler+0x10>)
 8000766:	f001 f85e 	bl	8001826 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000016c 	.word	0x2000016c

08000774 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <SPI2_IRQHandler+0x10>)
 800077a:	f003 fd29 	bl	80041d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000c4 	.word	0x200000c4

08000788 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <UART4_IRQHandler+0x10>)
 800078e:	f004 f8b9 	bl	8004904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001b0 	.word	0x200001b0

0800079c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <DMA2_Channel5_IRQHandler+0x10>)
 80007a2:	f001 f840 	bl	8001826 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200002c0 	.word	0x200002c0

080007b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <SystemInit+0x20>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <SystemInit+0x20>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_UART4_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_UART4_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_UART4_Init+0x64>)
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_UART4_Init+0x6c>)
 80007e2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_UART4_Init+0x64>)
 80007e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_UART4_Init+0x64>)
 80007ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_UART4_Init+0x64>)
 80007f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_UART4_Init+0x64>)
 80007fe:	2208      	movs	r2, #8
 8000800:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_UART4_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_UART4_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_UART4_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_UART4_Init+0x64>)
 8000816:	2201      	movs	r2, #1
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_UART4_Init+0x64>)
 800081c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_UART4_Init+0x64>)
 8000824:	f003 ffa4 	bl	8004770 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800082e:	f7ff fe5b 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001b0 	.word	0x200001b0
 800083c:	40004c00 	.word	0x40004c00
 8000840:	000186a0 	.word	0x000186a0

08000844 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART2_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_USART2_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000850:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x58>)
 8000888:	f003 ff72 	bl	8004770 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f7ff fe29 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000238 	.word	0x20000238
 80008a0:	40004400 	.word	0x40004400

080008a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <HAL_UART_MspInit+0x138>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d157      	bne.n	8000976 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a45      	ldr	r2, [pc, #276]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80008cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80008e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = SBUS_TX_Pin|GPIO_PIN_11;
 80008f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000908:	2305      	movs	r3, #5
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4834      	ldr	r0, [pc, #208]	; (80009e4 <HAL_UART_MspInit+0x140>)
 8000914:	f001 f894 	bl	8001a40 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <HAL_UART_MspInit+0x144>)
 800091a:	4a34      	ldr	r2, [pc, #208]	; (80009ec <HAL_UART_MspInit+0x148>)
 800091c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <HAL_UART_MspInit+0x144>)
 8000920:	2210      	movs	r2, #16
 8000922:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <HAL_UART_MspInit+0x144>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <HAL_UART_MspInit+0x144>)
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <HAL_UART_MspInit+0x144>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000936:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <HAL_UART_MspInit+0x144>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <HAL_UART_MspInit+0x144>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <HAL_UART_MspInit+0x144>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <HAL_UART_MspInit+0x144>)
 800094a:	f000 fe4a 	bl	80015e2 <HAL_DMA_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000954:	f7ff fdc8 	bl	80004e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <HAL_UART_MspInit+0x144>)
 800095c:	671a      	str	r2, [r3, #112]	; 0x70
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <HAL_UART_MspInit+0x144>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2034      	movs	r0, #52	; 0x34
 800096a:	f000 fe04 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800096e:	2034      	movs	r0, #52	; 0x34
 8000970:	f000 fe1d 	bl	80015ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000974:	e02d      	b.n	80009d2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <HAL_UART_MspInit+0x14c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d128      	bne.n	80009d2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	61d3      	str	r3, [r2, #28]
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b0:	230c      	movs	r3, #12
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f001 f837 	bl	8001a40 <HAL_GPIO_Init>
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004c00 	.word	0x40004c00
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000800 	.word	0x48000800
 80009e8:	200002c0 	.word	0x200002c0
 80009ec:	40020458 	.word	0x40020458
 80009f0:	40004400 	.word	0x40004400

080009f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f8:	f7ff feda 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a22:	f004 ff7d 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a26:	f7ff fc99 	bl	800035c <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a38:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 8000a3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a40:	20000308 	.word	0x20000308

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_2


void CS_Select (void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <CS_Select+0x14>)
 8000a52:	f001 f97f 	bl	8001d54 <HAL_GPIO_WritePin>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	48000400 	.word	0x48000400

08000a60 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2104      	movs	r1, #4
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <CS_UnSelect+0x14>)
 8000a6a:	f001 f973 	bl	8001d54 <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	48000400 	.word	0x48000400

08000a78 <CE_Enable>:


void CE_Enable (void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <CE_Enable+0x14>)
 8000a82:	f001 f967 	bl	8001d54 <HAL_GPIO_WritePin>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	48000400 	.word	0x48000400

08000a90 <CE_Disable>:

void CE_Disable (void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <CE_Disable+0x14>)
 8000a9a:	f001 f95b 	bl	8001d54 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	48000400 	.word	0x48000400

08000aa8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000ac6:	f7ff ffbf 	bl	8000a48 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000aca:	f107 010c 	add.w	r1, r7, #12
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <nrf24_WriteReg+0x40>)
 8000ad6:	f002 feac 	bl	8003832 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000ada:	f7ff ffc1 	bl	8000a60 <CS_UnSelect>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000c4 	.word	0x200000c4

08000aec <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b04:	f7ff ffa0 	bl	8000a48 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000b08:	f107 0114 	add.w	r1, r7, #20
 8000b0c:	2364      	movs	r3, #100	; 0x64
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <nrf24_WriteRegMulti+0x48>)
 8000b12:	f002 fe8e 	bl	8003832 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <nrf24_WriteRegMulti+0x48>)
 8000b22:	f002 fe86 	bl	8003832 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000b26:	f7ff ff9b 	bl	8000a60 <CS_UnSelect>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000c4 	.word	0x200000c4

08000b38 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b46:	f7ff ff7f 	bl	8000a48 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000b4a:	1df9      	adds	r1, r7, #7
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <nrf24_ReadReg+0x3c>)
 8000b52:	f002 fe6e 	bl	8003832 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000b56:	f107 010f 	add.w	r1, r7, #15
 8000b5a:	2364      	movs	r3, #100	; 0x64
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <nrf24_ReadReg+0x3c>)
 8000b60:	f002 ffdc 	bl	8003b1c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000b64:	f7ff ff7c 	bl	8000a60 <CS_UnSelect>

	return data;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c4 	.word	0x200000c4

08000b78 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000b86:	f7ff ff5f 	bl	8000a48 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000b8a:	f107 010f 	add.w	r1, r7, #15
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2201      	movs	r2, #1
 8000b92:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <nrf24_ReadReg_Multi+0x3c>)
 8000b94:	f002 fe4d 	bl	8003832 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <nrf24_ReadReg_Multi+0x3c>)
 8000ba4:	f002 ffba 	bl	8003b1c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000ba8:	f7ff ff5a 	bl	8000a60 <CS_UnSelect>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000c4 	.word	0x200000c4

08000bb8 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000bc2:	f7ff ff41 	bl	8000a48 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000bc6:	1df9      	adds	r1, r7, #7
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <nrfsendCmd+0x28>)
 8000bce:	f002 fe30 	bl	8003832 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000bd2:	f7ff ff45 	bl	8000a60 <CS_UnSelect>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000c4 	.word	0x200000c4

08000be4 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	d104      	bne.n	8000bfe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f7ff ff56 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000bfc:	e090      	b.n	8000d20 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b17      	cmp	r3, #23
 8000c02:	d104      	bne.n	8000c0e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000c04:	2111      	movs	r1, #17
 8000c06:	2017      	movs	r0, #23
 8000c08:	f7ff ff4e 	bl	8000aa8 <nrf24_WriteReg>
}
 8000c0c:	e088      	b.n	8000d20 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000c0e:	2108      	movs	r1, #8
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff49 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000c16:	213f      	movs	r1, #63	; 0x3f
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff ff45 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000c1e:	2103      	movs	r1, #3
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff ff41 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000c26:	2103      	movs	r1, #3
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f7ff ff3d 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000c2e:	2103      	movs	r1, #3
 8000c30:	2004      	movs	r0, #4
 8000c32:	f7ff ff39 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000c36:	2102      	movs	r1, #2
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f7ff ff35 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000c3e:	210e      	movs	r1, #14
 8000c40:	2006      	movs	r0, #6
 8000c42:	f7ff ff31 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2007      	movs	r0, #7
 8000c4a:	f7ff ff2d 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2008      	movs	r0, #8
 8000c52:	f7ff ff29 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2009      	movs	r0, #9
 8000c5a:	f7ff ff25 	bl	8000aa8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000c5e:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <nrf24_reset+0x144>)
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c68:	6018      	str	r0, [r3, #0]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	2205      	movs	r2, #5
 8000c74:	4619      	mov	r1, r3
 8000c76:	200a      	movs	r0, #10
 8000c78:	f7ff ff38 	bl	8000aec <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <nrf24_reset+0x148>)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c86:	6018      	str	r0, [r3, #0]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2205      	movs	r2, #5
 8000c92:	4619      	mov	r1, r3
 8000c94:	200b      	movs	r0, #11
 8000c96:	f7ff ff29 	bl	8000aec <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000c9a:	21c3      	movs	r1, #195	; 0xc3
 8000c9c:	200c      	movs	r0, #12
 8000c9e:	f7ff ff03 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000ca2:	21c4      	movs	r1, #196	; 0xc4
 8000ca4:	200d      	movs	r0, #13
 8000ca6:	f7ff feff 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000caa:	21c5      	movs	r1, #197	; 0xc5
 8000cac:	200e      	movs	r0, #14
 8000cae:	f7ff fefb 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000cb2:	21c6      	movs	r1, #198	; 0xc6
 8000cb4:	200f      	movs	r0, #15
 8000cb6:	f7ff fef7 	bl	8000aa8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <nrf24_reset+0x144>)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc4:	6018      	str	r0, [r3, #0]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	2205      	movs	r2, #5
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2010      	movs	r0, #16
 8000cd4:	f7ff ff0a 	bl	8000aec <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2011      	movs	r0, #17
 8000cdc:	f7ff fee4 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2012      	movs	r0, #18
 8000ce4:	f7ff fee0 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2013      	movs	r0, #19
 8000cec:	f7ff fedc 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2014      	movs	r0, #20
 8000cf4:	f7ff fed8 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2015      	movs	r0, #21
 8000cfc:	f7ff fed4 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2016      	movs	r0, #22
 8000d04:	f7ff fed0 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000d08:	2111      	movs	r1, #17
 8000d0a:	2017      	movs	r0, #23
 8000d0c:	f7ff fecc 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000d10:	2100      	movs	r1, #0
 8000d12:	201c      	movs	r0, #28
 8000d14:	f7ff fec8 	bl	8000aa8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f7ff fec4 	bl	8000aa8 <nrf24_WriteReg>
}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08005980 	.word	0x08005980
 8000d2c:	08005988 	.word	0x08005988

08000d30 <NRF24_Init>:




void NRF24_Init (void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000d34:	f7ff feac 	bl	8000a90 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff ff53 	bl	8000be4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff feb1 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000d46:	2100      	movs	r1, #0
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff fead 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff fea9 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000d56:	2103      	movs	r1, #3
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f7ff fea5 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2004      	movs	r0, #4
 8000d62:	f7ff fea1 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000d66:	2100      	movs	r1, #0
 8000d68:	2005      	movs	r0, #5
 8000d6a:	f7ff fe9d 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2006      	movs	r0, #6
 8000d72:	f7ff fe99 	bl	8000aa8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000d76:	f7ff fe7f 	bl	8000a78 <CE_Enable>

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000d8a:	f7ff fe81 	bl	8000a90 <CE_Disable>

	nrf24_reset (STATUS);
 8000d8e:	2007      	movs	r0, #7
 8000d90:	f7ff ff28 	bl	8000be4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	4619      	mov	r1, r3
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f7ff fe85 	bl	8000aa8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff feca 	bl	8000b38 <nrf24_ReadReg>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4619      	mov	r1, r3
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fe77 	bl	8000aa8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000dba:	2205      	movs	r2, #5
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	200b      	movs	r0, #11
 8000dc0:	f7ff fe94 	bl	8000aec <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000dc4:	21ee      	movs	r1, #238	; 0xee
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f7ff fe6e 	bl	8000aa8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000dcc:	2120      	movs	r1, #32
 8000dce:	2013      	movs	r0, #19
 8000dd0:	f7ff fe6a 	bl	8000aa8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff feaf 	bl	8000b38 <nrf24_ReadReg>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f043 0303 	orr.w	r3, r3, #3
 8000de4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	4619      	mov	r1, r3
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fe5c 	bl	8000aa8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000df0:	f7ff fe42 	bl	8000a78 <CE_Enable>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000e04:	2007      	movs	r0, #7
 8000e06:	f7ff fe97 	bl	8000b38 <nrf24_ReadReg>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <isDataAvailable+0x34>
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	2007      	movs	r0, #7
 8000e28:	f7ff fe3e 	bl	8000aa8 <nrf24_WriteReg>

		return 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <isDataAvailable+0x36>
	}

	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000e48:	f7ff fdfe 	bl	8000a48 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000e4c:	2361      	movs	r3, #97	; 0x61
 8000e4e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000e50:	f107 010f 	add.w	r1, r7, #15
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	2201      	movs	r2, #1
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <NRF24_Receive+0x50>)
 8000e5a:	f002 fcea 	bl	8003832 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	2220      	movs	r2, #32
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <NRF24_Receive+0x50>)
 8000e68:	f002 fe58 	bl	8003b1c <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000e6c:	f7ff fdf8 	bl	8000a60 <CS_UnSelect>

	HAL_Delay(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fa81 	bl	8001378 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000e76:	23e2      	movs	r3, #226	; 0xe2
 8000e78:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fe9b 	bl	8000bb8 <nrfsendCmd>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000c4 	.word	0x200000c4

08000e90 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e00c      	b.n	8000eb8 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	b2d9      	uxtb	r1, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	18d4      	adds	r4, r2, r3
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	f7ff fe45 	bl	8000b38 <nrf24_ReadReg>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b09      	cmp	r3, #9
 8000ebc:	ddef      	ble.n	8000e9e <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	330a      	adds	r3, #10
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f7ff fe56 	bl	8000b78 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	330f      	adds	r3, #15
 8000ed0:	2205      	movs	r2, #5
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	200b      	movs	r0, #11
 8000ed6:	f7ff fe4f 	bl	8000b78 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f103 0414 	add.w	r4, r3, #20
 8000ee0:	200c      	movs	r0, #12
 8000ee2:	f7ff fe29 	bl	8000b38 <nrf24_ReadReg>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f103 0415 	add.w	r4, r3, #21
 8000ef0:	200d      	movs	r0, #13
 8000ef2:	f7ff fe21 	bl	8000b38 <nrf24_ReadReg>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f103 0416 	add.w	r4, r3, #22
 8000f00:	200e      	movs	r0, #14
 8000f02:	f7ff fe19 	bl	8000b38 <nrf24_ReadReg>
 8000f06:	4603      	mov	r3, r0
 8000f08:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f103 0417 	add.w	r4, r3, #23
 8000f10:	200f      	movs	r0, #15
 8000f12:	f7ff fe11 	bl	8000b38 <nrf24_ReadReg>
 8000f16:	4603      	mov	r3, r0
 8000f18:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3318      	adds	r3, #24
 8000f1e:	2205      	movs	r2, #5
 8000f20:	4619      	mov	r1, r3
 8000f22:	200a      	movs	r0, #10
 8000f24:	f7ff fe28 	bl	8000b78 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000f28:	231d      	movs	r3, #29
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	e00e      	b.n	8000f4c <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3b0c      	subs	r3, #12
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	18d4      	adds	r4, r2, r3
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	f7ff fdfb 	bl	8000b38 <nrf24_ReadReg>
 8000f42:	4603      	mov	r3, r0
 8000f44:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b25      	cmp	r3, #37	; 0x25
 8000f50:	dded      	ble.n	8000f2e <NRF24_ReadAll+0x9e>
	}

}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <formatSBUSData>:

extern UART_HandleTypeDef huart4;
#define NRF24_UART &huart4

void formatSBUSData(uint16_t *channels, uint8_t *sbusData)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    sbusData[0] = 0x0F;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	220f      	movs	r2, #15
 8000f6a:	701a      	strb	r2, [r3, #0]
    sbusData[1] = (uint8_t)(channels[0] & 0x07FF);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	881a      	ldrh	r2, [r3, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
    sbusData[2] = (uint8_t)((channels[0] & 0x07FF) >> 8 | (channels[1] & 0x07FF) << 3);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	121b      	asrs	r3, r3, #8
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	f023 0307 	bic.w	r3, r3, #7
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b25a      	sxtb	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]
    sbusData[3] = (uint8_t)((channels[1] & 0x07FF) >> 5 | (channels[2] & 0x07FF) << 6);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	115b      	asrs	r3, r3, #5
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3303      	adds	r3, #3
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
    sbusData[4] = (uint8_t)((channels[2] & 0x07FF) >> 2);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	109a      	asrs	r2, r3, #2
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]
    sbusData[5] = (uint8_t)((channels[2] & 0x07FF) >> 10 | (channels[3] & 0x07FF) << 1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	129b      	asrs	r3, r3, #10
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3306      	adds	r3, #6
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b25a      	sxtb	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3305      	adds	r3, #5
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    sbusData[6] = (uint8_t)((channels[3] & 0x07FF) >> 7 | (channels[4] & 0x07FF) << 4);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3306      	adds	r3, #6
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	11db      	asrs	r3, r3, #7
 8001012:	b25b      	sxtb	r3, r3
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	b25a      	sxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3308      	adds	r3, #8
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b25b      	sxtb	r3, r3
 8001024:	f023 030f 	bic.w	r3, r3, #15
 8001028:	b25b      	sxtb	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b25a      	sxtb	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3306      	adds	r3, #6
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
    sbusData[7] = (uint8_t)((channels[4] & 0x07FF) >> 4 | (channels[5] & 0x07FF) << 7);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3308      	adds	r3, #8
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	111b      	asrs	r3, r3, #4
 800103e:	b25b      	sxtb	r3, r3
 8001040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	330a      	adds	r3, #10
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	01db      	lsls	r3, r3, #7
 800104e:	b25b      	sxtb	r3, r3
 8001050:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001054:	b25b      	sxtb	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b25a      	sxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3307      	adds	r3, #7
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]
    sbusData[8] = (uint8_t)((channels[5] & 0x07FF) >> 1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	330a      	adds	r3, #10
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	105a      	asrs	r2, r3, #1
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3308      	adds	r3, #8
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
    sbusData[9] = (uint8_t)((channels[5] & 0x07FF) >> 9  | (channels[6] & 0x07FF) << 2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	330a      	adds	r3, #10
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	125b      	asrs	r3, r3, #9
 800107a:	b25b      	sxtb	r3, r3
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	b25a      	sxtb	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	330c      	adds	r3, #12
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f023 0303 	bic.w	r3, r3, #3
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25a      	sxtb	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3309      	adds	r3, #9
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
    sbusData[10] = (uint8_t)((channels[6] & 0x07FF) >> 6  | (channels[7] & 0x07FF) << 5);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	330c      	adds	r3, #12
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	119b      	asrs	r3, r3, #6
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	330e      	adds	r3, #14
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	015b      	lsls	r3, r3, #5
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	330a      	adds	r3, #10
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
    sbusData[11] = (uint8_t)((channels[7] & 0x07FF) >> 3);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	330e      	adds	r3, #14
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	10da      	asrs	r2, r3, #3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	330b      	adds	r3, #11
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
    sbusData[12] = (uint8_t)((channels[8] & 0x07FF));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3310      	adds	r3, #16
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	330c      	adds	r3, #12
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
    sbusData[13] = (uint8_t)((channels[8] & 0x07FF) >> 8 | (channels[9]  & 0x07FF) << 3);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3310      	adds	r3, #16
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3312      	adds	r3, #18
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f023 0307 	bic.w	r3, r3, #7
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25a      	sxtb	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	330d      	adds	r3, #13
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
    sbusData[14] = (uint8_t)((channels[9] & 0x07FF) >> 5 | (channels[10] & 0x07FF) << 6);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3312      	adds	r3, #18
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	115b      	asrs	r3, r3, #5
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800111c:	b25a      	sxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3314      	adds	r3, #20
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	b25b      	sxtb	r3, r3
 8001128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800112c:	b25b      	sxtb	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b25a      	sxtb	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	330e      	adds	r3, #14
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
    sbusData[15] = (uint8_t)((channels[10] & 0x07FF) >> 2);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3314      	adds	r3, #20
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	109a      	asrs	r2, r3, #2
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	330f      	adds	r3, #15
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]
    sbusData[16] = (uint8_t)((channels[10] & 0x07FF) >> 10 | (channels[11] & 0x07FF) << 1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3314      	adds	r3, #20
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	129b      	asrs	r3, r3, #10
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	b25a      	sxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3316      	adds	r3, #22
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	b25b      	sxtb	r3, r3
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	b25b      	sxtb	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b25a      	sxtb	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3310      	adds	r3, #16
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
    sbusData[17] = (uint8_t)((channels[11] & 0x07FF) >> 7  | (channels[12] & 0x07FF) << 4);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3316      	adds	r3, #22
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	11db      	asrs	r3, r3, #7
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	b25a      	sxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3318      	adds	r3, #24
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	b25b      	sxtb	r3, r3
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	b25b      	sxtb	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b25a      	sxtb	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3311      	adds	r3, #17
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
    sbusData[18] = (uint8_t)((channels[12] & 0x07FF) >> 4  | (channels[13] & 0x07FF) << 7);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3318      	adds	r3, #24
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	111b      	asrs	r3, r3, #4
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	331a      	adds	r3, #26
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	01db      	lsls	r3, r3, #7
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3312      	adds	r3, #18
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
    sbusData[19] = (uint8_t)((channels[13] & 0x07FF) >> 1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	331a      	adds	r3, #26
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	105a      	asrs	r2, r3, #1
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3313      	adds	r3, #19
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]
    sbusData[20] = (uint8_t)((channels[13] & 0x07FF) >> 9  | (channels[14] & 0x07FF) << 2);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	331a      	adds	r3, #26
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	125b      	asrs	r3, r3, #9
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	331c      	adds	r3, #28
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f023 0303 	bic.w	r3, r3, #3
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25a      	sxtb	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3314      	adds	r3, #20
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
    sbusData[21] = (uint8_t)((channels[14] & 0x07FF) >> 6  | (channels[15] & 0x07FF) << 5);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	331c      	adds	r3, #28
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	119b      	asrs	r3, r3, #6
 8001212:	b25b      	sxtb	r3, r3
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	b25a      	sxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	331e      	adds	r3, #30
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b25a      	sxtb	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3315      	adds	r3, #21
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
    sbusData[22] = (uint8_t)((channels[15] & 0x07FF) >> 3);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	331e      	adds	r3, #30
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	10da      	asrs	r2, r3, #3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3316      	adds	r3, #22
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
    sbusData[23] = 0x00; //| (data_.ch17 * CH17_MASK_) | (data_.ch18 * CH18_MASK_) |(data_.failsafe * FAILSAFE_MASK_) | (data_.lost_frame * LOST_FRAME_MASK_);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3317      	adds	r3, #23
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    sbusData[24] = 0x00;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3318      	adds	r3, #24
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <sendSBUSData>:

void sendSBUSData(uint8_t *sbusData)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    while(HAL_UART_Transmit_DMA(NRF24_UART, sbusData, SBUS_FRAME_SIZE) != HAL_OK);
 8001264:	bf00      	nop
 8001266:	2219      	movs	r2, #25
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <sendSBUSData+0x24>)
 800126c:	f003 face 	bl	800480c <HAL_UART_Transmit_DMA>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f7      	bne.n	8001266 <sendSBUSData+0xa>
    //while(HAL_UART_Transmit(&huart5, sbusData, SBUS_FRAME_SIZE, 0) != HAL_OK);
    //HAL_UART_Transmit(&huart5, sbusData, SBUS_FRAME_SIZE, 1000);
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001b0 	.word	0x200001b0

08001284 <sendSbusChannels>:

void sendSbusChannels(uint16_t *sbusChannels)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t sbusData[SBUS_FRAME_SIZE];

	formatSBUSData(sbusChannels, sbusData);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fe62 	bl	8000f5c <formatSBUSData>
	sendSBUSData(sbusData);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffdd 	bl	800125c <sendSBUSData>
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x28>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x28>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f94f 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff f9f2 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f967 	bl	80015ca <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 f92f 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000008 	.word	0x20000008
 8001330:	20000010 	.word	0x20000010
 8001334:	2000000c 	.word	0x2000000c

08001338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000010 	.word	0x20000010
 800135c:	20000304 	.word	0x20000304

08001360 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;  
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000304 	.word	0x20000304

08001378 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000010 	.word	0x20000010

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e037      	b.n	8001668 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800160e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001612:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f9bc 	bl	80019c8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_DMA_Start_IT+0x20>
 800168c:	2302      	movs	r3, #2
 800168e:	e04a      	b.n	8001726 <HAL_DMA_Start_IT+0xb6>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d13a      	bne.n	8001718 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2202      	movs	r2, #2
 80016a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f950 	bl	800196c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 020e 	orr.w	r2, r2, #14
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e00f      	b.n	8001706 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 020a 	orr.w	r2, r2, #10
 80016f4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0204 	bic.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e005      	b.n	8001724 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001720:	2302      	movs	r3, #2
 8001722:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e02e      	b.n	800179e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001746:	2b02      	cmp	r3, #2
 8001748:	d008      	beq.n	800175c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e020      	b.n	800179e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020e 	bic.w	r2, r2, #14
 800176a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d005      	beq.n	80017cc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2204      	movs	r2, #4
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e027      	b.n	800181c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020e 	bic.w	r2, r2, #14
 80017da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
    }
  }
  return status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2204      	movs	r2, #4
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d024      	beq.n	8001898 <HAL_DMA_IRQHandler+0x72>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01f      	beq.n	8001898 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0204 	bic.w	r2, r2, #4
 8001874:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	2104      	movs	r1, #4
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d06a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001896:	e065      	b.n	8001964 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2202      	movs	r2, #2
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02c      	beq.n	8001902 <HAL_DMA_IRQHandler+0xdc>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d027      	beq.n	8001902 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 020a 	bic.w	r2, r2, #10
 80018ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e0:	2102      	movs	r1, #2
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d035      	beq.n	8001964 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001900:	e030      	b.n	8001964 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2208      	movs	r2, #8
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d028      	beq.n	8001964 <HAL_DMA_IRQHandler+0x13e>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020e 	bic.w	r2, r2, #14
 800192a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
    }
  }
}
 8001962:	e7ff      	b.n	8001964 <HAL_DMA_IRQHandler+0x13e>
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	2101      	movs	r1, #1
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d108      	bne.n	80019ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019aa:	e007      	b.n	80019bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <DMA_CalcBaseAndBitshift+0x60>)
 80019d8:	429a      	cmp	r2, r3
 80019da:	d80f      	bhi.n	80019fc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <DMA_CalcBaseAndBitshift+0x64>)
 80019e4:	4413      	add	r3, r2
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <DMA_CalcBaseAndBitshift+0x68>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	009a      	lsls	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <DMA_CalcBaseAndBitshift+0x6c>)
 80019f8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80019fa:	e00e      	b.n	8001a1a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <DMA_CalcBaseAndBitshift+0x70>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <DMA_CalcBaseAndBitshift+0x68>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	009a      	lsls	r2, r3, #2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <DMA_CalcBaseAndBitshift+0x74>)
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40020407 	.word	0x40020407
 8001a2c:	bffdfff8 	.word	0xbffdfff8
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	40020000 	.word	0x40020000
 8001a38:	bffdfbf8 	.word	0xbffdfbf8
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e160      	b.n	8001d12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8152 	beq.w	8001d0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d005      	beq.n	8001a80 <HAL_GPIO_Init+0x40>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d130      	bne.n	8001ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 0201 	and.w	r2, r3, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d017      	beq.n	8001b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d123      	bne.n	8001b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0203 	and.w	r2, r3, #3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80ac 	beq.w	8001d0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a5d      	ldr	r2, [pc, #372]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bcc:	4a59      	ldr	r2, [pc, #356]	; (8001d34 <HAL_GPIO_Init+0x2f4>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bf6:	d025      	beq.n	8001c44 <HAL_GPIO_Init+0x204>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4f      	ldr	r2, [pc, #316]	; (8001d38 <HAL_GPIO_Init+0x2f8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01f      	beq.n	8001c40 <HAL_GPIO_Init+0x200>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_GPIO_Init+0x2fc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d019      	beq.n	8001c3c <HAL_GPIO_Init+0x1fc>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x300>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_GPIO_Init+0x1f8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00d      	beq.n	8001c34 <HAL_GPIO_Init+0x1f4>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_GPIO_Init+0x308>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d007      	beq.n	8001c30 <HAL_GPIO_Init+0x1f0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_GPIO_Init+0x1ec>
 8001c28:	2306      	movs	r3, #6
 8001c2a:	e00c      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	e00a      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c44:	2300      	movs	r3, #0
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c56:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_GPIO_Init+0x2f4>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c64:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c88:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8e:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb2:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f ae97 	bne.w	8001a50 <HAL_GPIO_Init+0x10>
  }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	48001800 	.word	0x48001800
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43d9      	mvns	r1, r3
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	400b      	ands	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f001 b83a 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 816f 	beq.w	80020d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001df4:	4bb5      	ldr	r3, [pc, #724]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4bb2      	ldr	r3, [pc, #712]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d15c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x10e>
 8001e0c:	4baf      	ldr	r3, [pc, #700]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d155      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x10e>
 8001e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x94>
 8001e46:	4ba1      	ldr	r3, [pc, #644]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e015      	b.n	8001e78 <HAL_RCC_OscConfig+0xc0>
 8001e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e68:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e74:	4b95      	ldr	r3, [pc, #596]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001e80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001e8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8111 	beq.w	80020d0 <HAL_RCC_OscConfig+0x318>
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 8108 	bne.w	80020d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f000 bfc6 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
 8001ed8:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a7b      	ldr	r2, [pc, #492]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e036      	b.n	8001f54 <HAL_RCC_OscConfig+0x19c>
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x158>
 8001ef6:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a74      	ldr	r2, [pc, #464]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b72      	ldr	r3, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a71      	ldr	r2, [pc, #452]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e021      	b.n	8001f54 <HAL_RCC_OscConfig+0x19c>
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x184>
 8001f22:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a66      	ldr	r2, [pc, #408]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0x19c>
 8001f3c:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a62      	ldr	r2, [pc, #392]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b60      	ldr	r3, [pc, #384]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5f      	ldr	r2, [pc, #380]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d059      	beq.n	8002018 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f9fc 	bl	8001360 <HAL_GetTick>
 8001f68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f9f7 	bl	8001360 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d902      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f000 bf67 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d102      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x1fe>
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x22a>
 8001fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001fea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ff6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ab      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b6>
 8002016:	e05c      	b.n	80020d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff f9a2 	bl	8001360 <HAL_GetTick>
 800201c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002022:	f7ff f99d 	bl	8001360 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d902      	bls.n	8002038 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	f000 bf0d 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800204c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d102      	bne.n	800206a <HAL_RCC_OscConfig+0x2b2>
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x2de>
 800206a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800207e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002082:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002086:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_RCC_OscConfig+0x314>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800209a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800209e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80020aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ab      	bne.n	8002022 <HAL_RCC_OscConfig+0x26a>
 80020ca:	e002      	b.n	80020d2 <HAL_RCC_OscConfig+0x31a>
 80020cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 817f 	beq.w	80023e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020e8:	4ba7      	ldr	r3, [pc, #668]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00c      	beq.n	800210e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020f4:	4ba4      	ldr	r3, [pc, #656]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d173      	bne.n	80021e8 <HAL_RCC_OscConfig+0x430>
 8002100:	4ba1      	ldr	r3, [pc, #644]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210c:	d16c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x430>
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002120:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_RCC_OscConfig+0x386>
 8002138:	4b93      	ldr	r3, [pc, #588]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e013      	b.n	8002166 <HAL_RCC_OscConfig+0x3ae>
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002156:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2202      	movs	r2, #2
 8002168:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800216c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002178:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800217c:	fab2 f282 	clz	r2, r2
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f042 0220 	orr.w	r2, r2, #32
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	f002 021f 	and.w	r2, r2, #31
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f202 	lsl.w	r2, r1, r2
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCC_OscConfig+0x3f6>
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d002      	beq.n	80021ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f000 be52 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b76      	ldr	r3, [pc, #472]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	21f8      	movs	r1, #248	; 0xf8
 80021c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80021cc:	fa91 f1a1 	rbit	r1, r1
 80021d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80021d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021d8:	fab1 f181 	clz	r1, r1
 80021dc:	b2c9      	uxtb	r1, r1
 80021de:	408b      	lsls	r3, r1
 80021e0:	4969      	ldr	r1, [pc, #420]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e0fe      	b.n	80023e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8088 	beq.w	800230a <HAL_RCC_OscConfig+0x552>
 80021fa:	2301      	movs	r3, #1
 80021fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800220c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff f89b 	bl	8001360 <HAL_GetTick>
 800222a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff f896 	bl	8001360 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d902      	bls.n	8002246 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	f000 be06 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002246:	2302      	movs	r3, #2
 8002248:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002258:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x4be>
 8002270:	4b45      	ldr	r3, [pc, #276]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	e013      	b.n	800229e <HAL_RCC_OscConfig+0x4e6>
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800228e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	2202      	movs	r2, #2
 80022a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80022a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80022b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f002 021f 	and.w	r2, r2, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0af      	beq.n	8002230 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	21f8      	movs	r1, #248	; 0xf8
 80022e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80022ee:	fa91 f1a1 	rbit	r1, r1
 80022f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80022f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022fa:	fab1 f181 	clz	r1, r1
 80022fe:	b2c9      	uxtb	r1, r1
 8002300:	408b      	lsls	r3, r1
 8002302:	4921      	ldr	r1, [pc, #132]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e06d      	b.n	80023e6 <HAL_RCC_OscConfig+0x62e>
 800230a:	2301      	movs	r3, #1
 800230c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800231c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	461a      	mov	r2, r3
 8002332:	2300      	movs	r3, #0
 8002334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff f813 	bl	8001360 <HAL_GetTick>
 800233a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff f80e 	bl	8001360 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d902      	bls.n	8002356 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	f000 bd7e 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x5d4>
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <HAL_RCC_OscConfig+0x5d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	e016      	b.n	80023b4 <HAL_RCC_OscConfig+0x5fc>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	2302      	movs	r3, #2
 800238e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800239e:	2302      	movs	r3, #2
 80023a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023b0:	4bbf      	ldr	r3, [pc, #764]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2202      	movs	r2, #2
 80023b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80023ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023be:	fa92 f2a2 	rbit	r2, r2
 80023c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80023c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f042 0220 	orr.w	r2, r2, #32
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ac      	bne.n	8002340 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8113 	beq.w	8002622 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002400:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07c      	beq.n	8002506 <HAL_RCC_OscConfig+0x74e>
 800240c:	2301      	movs	r3, #1
 800240e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800241e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4ba2      	ldr	r3, [pc, #648]	; (80026b4 <HAL_RCC_OscConfig+0x8fc>)
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	461a      	mov	r2, r3
 8002432:	2301      	movs	r3, #1
 8002434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe ff93 	bl	8001360 <HAL_GetTick>
 800243a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe ff8e 	bl	8001360 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d902      	bls.n	8002456 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	f000 bcfe 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002468:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 80024b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024c2:	2102      	movs	r1, #2
 80024c4:	6019      	str	r1, [r3, #0]
 80024c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f1a3 	rbit	r1, r3
 80024d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024dc:	6019      	str	r1, [r3, #0]
  return result;
 80024de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d09d      	beq.n	8002440 <HAL_RCC_OscConfig+0x688>
 8002504:	e08d      	b.n	8002622 <HAL_RCC_OscConfig+0x86a>
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002516:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	fa93 f2a3 	rbit	r2, r3
 8002520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002524:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002528:	601a      	str	r2, [r3, #0]
  return result;
 800252a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002532:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x8fc>)
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	461a      	mov	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7fe ff0a 	bl	8001360 <HAL_GetTick>
 800254c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7fe ff05 	bl	8001360 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	f000 bc75 	b.w	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002586:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002594:	2202      	movs	r2, #2
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025b8:	2202      	movs	r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 80025d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025e0:	2102      	movs	r1, #2
 80025e2:	6019      	str	r1, [r3, #0]
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f1a3 	rbit	r1, r3
 80025f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025fa:	6019      	str	r1, [r3, #0]
  return result;
 80025fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002600:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d197      	bne.n	8002552 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002626:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 81a5 	beq.w	8002982 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	61d3      	str	r3, [r2, #28]
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_RCC_OscConfig+0x8f8>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800265e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_RCC_OscConfig+0x900>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d121      	bne.n	80026c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x900>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x900>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7fe fe66 	bl	8001360 <HAL_GetTick>
 8002694:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e010      	b.n	80026bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fe61 	bl	8001360 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d908      	bls.n	80026bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e3d1      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	10908120 	.word	0x10908120
 80026b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <HAL_RCC_OscConfig+0xb3c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0e8      	beq.n	800269a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x92e>
 80026d8:	4b87      	ldr	r3, [pc, #540]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a86      	ldr	r2, [pc, #536]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e035      	b.n	8002752 <HAL_RCC_OscConfig+0x99a>
 80026e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x958>
 80026f6:	4b80      	ldr	r3, [pc, #512]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a7f      	ldr	r2, [pc, #508]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a7c      	ldr	r2, [pc, #496]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	e020      	b.n	8002752 <HAL_RCC_OscConfig+0x99a>
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x982>
 8002720:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a74      	ldr	r2, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a71      	ldr	r2, [pc, #452]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x99a>
 800273a:	4b6f      	ldr	r3, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002756:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8081 	beq.w	8002866 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fdfc 	bl	8001360 <HAL_GetTick>
 8002768:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fdf7 	bl	8001360 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e365      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002796:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xa3a>
 80027ec:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	e013      	b.n	800281a <HAL_RCC_OscConfig+0xa62>
 80027f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002802:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002810:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800281e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002822:	2102      	movs	r1, #2
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800282a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fa92 f1a2 	rbit	r1, r2
 8002834:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002838:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800283c:	6011      	str	r1, [r2, #0]
  return result;
 800283e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002842:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d084      	beq.n	800276e <HAL_RCC_OscConfig+0x9b6>
 8002864:	e083      	b.n	800296e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fd7b 	bl	8001360 <HAL_GetTick>
 800286a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7fe fd76 	bl	8001360 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e2e4      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002890:	2202      	movs	r2, #2
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002898:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028b4:	2202      	movs	r2, #2
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0xb44>
 80028ee:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <HAL_RCC_OscConfig+0xb40>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	e017      	b.n	8002924 <HAL_RCC_OscConfig+0xb6c>
 80028f4:	40007000 	.word	0x40007000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002900:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002904:	2202      	movs	r2, #2
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	4bb3      	ldr	r3, [pc, #716]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002928:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800292c:	2102      	movs	r1, #2
 800292e:	6011      	str	r1, [r2, #0]
 8002930:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002934:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	fa92 f1a2 	rbit	r1, r2
 800293e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002942:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002946:	6011      	str	r1, [r2, #0]
  return result;
 8002948:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800294c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d180      	bne.n	8002870 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800296e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a9d      	ldr	r2, [pc, #628]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 825e 	beq.w	8002e50 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b96      	ldr	r3, [pc, #600]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	f000 821f 	beq.w	8002de0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	f040 8170 	bne.w	8002c94 <HAL_RCC_OscConfig+0xedc>
 80029b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029d8:	601a      	str	r2, [r3, #0]
  return result;
 80029da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	461a      	mov	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe fcb1 	bl	8001360 <HAL_GetTick>
 80029fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	e009      	b.n	8002a18 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fcac 	bl	8001360 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e21c      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	fa93 f2a3 	rbit	r2, r3
 8002a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a3c:	601a      	str	r2, [r3, #0]
  return result;
 8002a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_OscConfig+0xcaa>
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	e027      	b.n	8002ab2 <HAL_RCC_OscConfig+0xcfa>
 8002a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a74:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ab6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002abe:	6011      	str	r1, [r2, #0]
 8002ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ac4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	fa92 f1a2 	rbit	r1, r2
 8002ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ad2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002ad6:	6011      	str	r1, [r2, #0]
  return result;
 8002ad8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002adc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d182      	bne.n	8002a04 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afe:	4b3c      	ldr	r3, [pc, #240]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	4937      	ldr	r1, [pc, #220]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a19      	ldr	r1, [r3, #32]
 8002b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	492d      	ldr	r1, [pc, #180]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b64:	601a      	str	r2, [r3, #0]
  return result;
 8002b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	461a      	mov	r2, r3
 8002b82:	2301      	movs	r3, #1
 8002b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fbeb 	bl	8001360 <HAL_GetTick>
 8002b8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fbe6 	bl	8001360 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e156      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bc8:	601a      	str	r2, [r3, #0]
  return result;
 8002bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xe3c>
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <HAL_RCC_OscConfig+0xe38>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e02a      	b.n	8002c44 <HAL_RCC_OscConfig+0xe8c>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	4b86      	ldr	r3, [pc, #536]	; (8002e5c <HAL_RCC_OscConfig+0x10a4>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	fa92 f1a2 	rbit	r1, r2
 8002c60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c64:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002c68:	6011      	str	r1, [r2, #0]
  return result;
 8002c6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c6e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fab2 f282 	clz	r2, r2
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f002 021f 	and.w	r2, r2, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f43f af7f 	beq.w	8002b90 <HAL_RCC_OscConfig+0xdd8>
 8002c92:	e0dd      	b.n	8002e50 <HAL_RCC_OscConfig+0x1098>
 8002c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cb8:	601a      	str	r2, [r3, #0]
  return result;
 8002cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cc2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe fb41 	bl	8001360 <HAL_GetTick>
 8002cde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce2:	e009      	b.n	8002cf8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe fb3c 	bl	8001360 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0ac      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
 8002cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	fa93 f2a3 	rbit	r2, r3
 8002d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d1c:	601a      	str	r2, [r3, #0]
  return result;
 8002d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCC_OscConfig+0xf8a>
 8002d3c:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x10a4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e027      	b.n	8002d92 <HAL_RCC_OscConfig+0xfda>
 8002d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fa93 f2a3 	rbit	r2, r3
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x10a4>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d9e:	6011      	str	r1, [r2, #0]
 8002da0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002da4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	fa92 f1a2 	rbit	r1, r2
 8002dae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002db2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002db6:	6011      	str	r1, [r2, #0]
  return result;
 8002db8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dbc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d182      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xf2c>
 8002dde:	e037      	b.n	8002e50 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e02e      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_OscConfig+0x10a4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_RCC_OscConfig+0x10a4>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d117      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002e20:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b09e      	sub	sp, #120	; 0x78
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e162      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b90      	ldr	r3, [pc, #576]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b8d      	ldr	r3, [pc, #564]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	498b      	ldr	r1, [pc, #556]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b89      	ldr	r3, [pc, #548]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e14a      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	497f      	ldr	r1, [pc, #508]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80dc 	beq.w	800308c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d13c      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xf6>
 8002edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xa6>
 8002f00:	4b6f      	ldr	r3, [pc, #444]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	e00f      	b.n	8002f26 <HAL_RCC_ClockConfig+0xc6>
 8002f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	667b      	str	r3, [r7, #100]	; 0x64
 8002f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f18:	663b      	str	r3, [r7, #96]	; 0x60
 8002f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f22:	4b67      	ldr	r3, [pc, #412]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f2e:	fa92 f2a2 	rbit	r2, r2
 8002f32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f36:	fab2 f282 	clz	r2, r2
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	f042 0220 	orr.w	r2, r2, #32
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f002 021f 	and.w	r2, r2, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d17b      	bne.n	800304a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0f3      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d13c      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x178>
 8002f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x128>
 8002f82:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e00f      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
 8002f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
 8002f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fac:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb0:	fa92 f2a2 	rbit	r2, r2
 8002fb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb8:	fab2 f282 	clz	r2, r2
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f042 0220 	orr.w	r2, r2, #32
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f002 021f 	and.w	r2, r2, #31
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13a      	bne.n	800304a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b2      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_ClockConfig+0x1a0>
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e00d      	b.n	800301c <HAL_RCC_ClockConfig+0x1bc>
 8003000:	2302      	movs	r3, #2
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	2302      	movs	r3, #2
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2202      	movs	r2, #2
 800301e:	61ba      	str	r2, [r7, #24]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	fa92 f2a2 	rbit	r2, r2
 8003026:	617a      	str	r2, [r7, #20]
  return result;
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f002 021f 	and.w	r2, r2, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e079      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f023 0203 	bic.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	491a      	ldr	r1, [pc, #104]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800305c:	f7fe f980 	bl	8001360 <HAL_GetTick>
 8003060:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	e00a      	b.n	800307a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fe f97c 	bl	8001360 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e061      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_ClockConfig+0x260>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 020c 	and.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	429a      	cmp	r2, r3
 800308a:	d1eb      	bne.n	8003064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d214      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	4906      	ldr	r1, [pc, #24]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e040      	b.n	800313e <HAL_RCC_ClockConfig+0x2de>
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_RCC_ClockConfig+0x2e8>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	491a      	ldr	r1, [pc, #104]	; (8003148 <HAL_RCC_ClockConfig+0x2e8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_RCC_ClockConfig+0x2e8>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4912      	ldr	r1, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x2e8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003102:	f000 f829 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003106:	4601      	mov	r1, r0
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_RCC_ClockConfig+0x2e8>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	22f0      	movs	r2, #240	; 0xf0
 8003112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	fa92 f2a2 	rbit	r2, r2
 800311a:	60fa      	str	r2, [r7, #12]
  return result;
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	fab2 f282 	clz	r2, r2
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	40d3      	lsrs	r3, r2
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x2ec>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	fa21 f303 	lsr.w	r3, r1, r3
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_RCC_ClockConfig+0x2f0>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_RCC_ClockConfig+0x2f4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f8ce 	bl	80012d8 <HAL_InitTick>
  
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3778      	adds	r7, #120	; 0x78
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	08005990 	.word	0x08005990
 8003150:	20000008 	.word	0x20000008
 8003154:	2000000c 	.word	0x2000000c

08003158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x30>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x36>
 8003186:	e029      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800318a:	613b      	str	r3, [r7, #16]
      break;
 800318c:	e029      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0c9b      	lsrs	r3, r3, #18
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031b4:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e007      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	613b      	str	r3, [r7, #16]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031de:	613b      	str	r3, [r7, #16]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	693b      	ldr	r3, [r7, #16]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40021000 	.word	0x40021000
 80031f4:	007a1200 	.word	0x007a1200
 80031f8:	080059a8 	.word	0x080059a8
 80031fc:	080059b8 	.word	0x080059b8

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000008 	.word	0x20000008

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800321e:	f7ff ffef 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003222:	4601      	mov	r1, r0
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800322c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003230:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	fa92 f2a2 	rbit	r2, r2
 8003238:	603a      	str	r2, [r7, #0]
  return result;
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	fab2 f282 	clz	r2, r2
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	40d3      	lsrs	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	080059a0 	.word	0x080059a0

0800325c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003262:	f7ff ffcd 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003266:	4601      	mov	r1, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003270:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003274:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	603a      	str	r2, [r7, #0]
  return result;
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	fab2 f282 	clz	r2, r2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	40d3      	lsrs	r3, r2
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_RCC_GetPCLK2Freq+0x40>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	080059a0 	.word	0x080059a0

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b092      	sub	sp, #72	; 0x48
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80d4 	beq.w	800346c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c4:	4b4e      	ldr	r3, [pc, #312]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10e      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
 80032dc:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	4b45      	ldr	r3, [pc, #276]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fa:	4b42      	ldr	r3, [pc, #264]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a41      	ldr	r2, [pc, #260]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003306:	f7fe f82b 	bl	8001360 <HAL_GetTick>
 800330a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	e008      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe f827 	bl	8001360 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b64      	cmp	r3, #100	; 0x64
 800331a:	d901      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1d6      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b38      	ldr	r3, [pc, #224]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8084 	beq.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003348:	429a      	cmp	r2, r3
 800334a:	d07c      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	461a      	mov	r2, r3
 8003376:	2301      	movs	r3, #1
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	461a      	mov	r2, r3
 800339a:	2300      	movs	r3, #0
 800339c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800339e:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04b      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fd ffd7 	bl	8001360 <HAL_GetTick>
 80033b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fd ffd3 	bl	8001360 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e180      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80033cc:	2302      	movs	r3, #2
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	2302      	movs	r3, #2
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	61fb      	str	r3, [r7, #28]
  return result;
 80033e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f043 0302 	orr.w	r3, r3, #2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d108      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033fa:	4b01      	ldr	r3, [pc, #4]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	e00d      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003400:	40021000 	.word	0x40021000
 8003404:	40007000 	.word	0x40007000
 8003408:	10908100 	.word	0x10908100
 800340c:	2302      	movs	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	4b9a      	ldr	r3, [pc, #616]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2202      	movs	r2, #2
 800341e:	613a      	str	r2, [r7, #16]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	fa92 f2a2 	rbit	r2, r2
 8003426:	60fa      	str	r2, [r7, #12]
  return result;
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f002 021f 	and.w	r2, r2, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0b7      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003446:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	498c      	ldr	r1, [pc, #560]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003458:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4a87      	ldr	r2, [pc, #540]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f023 0203 	bic.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	497f      	ldr	r1, [pc, #508]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003496:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4978      	ldr	r1, [pc, #480]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034b4:	4b73      	ldr	r3, [pc, #460]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	4970      	ldr	r1, [pc, #448]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d2:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f023 0210 	bic.w	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4969      	ldr	r1, [pc, #420]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	4961      	ldr	r1, [pc, #388]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800350e:	4b5d      	ldr	r3, [pc, #372]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f023 0220 	bic.w	r2, r3, #32
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	495a      	ldr	r1, [pc, #360]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800352c:	4b55      	ldr	r3, [pc, #340]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	4952      	ldr	r1, [pc, #328]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800354a:	4b4e      	ldr	r3, [pc, #312]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	494b      	ldr	r1, [pc, #300]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4943      	ldr	r1, [pc, #268]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003586:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	493c      	ldr	r1, [pc, #240]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035a4:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	4934      	ldr	r1, [pc, #208]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	492d      	ldr	r1, [pc, #180]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	4925      	ldr	r1, [pc, #148]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	491e      	ldr	r1, [pc, #120]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360c:	4313      	orrs	r3, r2
 800360e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	490f      	ldr	r1, [pc, #60]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	4907      	ldr	r1, [pc, #28]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003676:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	e002      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368a:	4913      	ldr	r1, [pc, #76]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800368c:	4313      	orrs	r3, r2
 800368e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	490b      	ldr	r1, [pc, #44]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3748      	adds	r7, #72	; 0x48
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e09d      	b.n	800382a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fe:	d009      	beq.n	8003714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
 8003706:	e005      	b.n	8003714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fc ff1e 	bl	8000570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003754:	d902      	bls.n	800375c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e002      	b.n	8003762 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800375c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003760:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800376a:	d007      	beq.n	800377c <HAL_SPI_Init+0xa0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003774:	d002      	beq.n	800377c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	ea42 0103 	orr.w	r1, r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	f003 0204 	and.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037f8:	ea42 0103 	orr.w	r1, r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003818:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b088      	sub	sp, #32
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_SPI_Transmit+0x22>
 8003850:	2302      	movs	r3, #2
 8003852:	e15f      	b.n	8003b14 <HAL_SPI_Transmit+0x2e2>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800385c:	f7fd fd80 	bl	8001360 <HAL_GetTick>
 8003860:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d002      	beq.n	8003878 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003876:	e148      	b.n	8003b0a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Transmit+0x52>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003888:	e13f      	b.n	8003b0a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2203      	movs	r2, #3
 800388e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d4:	d10f      	bne.n	80038f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d007      	beq.n	8003914 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800391c:	d94f      	bls.n	80039be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_SPI_Transmit+0xfa>
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d142      	bne.n	80039b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003950:	e02f      	b.n	80039b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d112      	bne.n	8003986 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003984:	e015      	b.n	80039b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003986:	f7fd fceb 	bl	8001360 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d803      	bhi.n	800399e <HAL_SPI_Transmit+0x16c>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_Transmit+0x172>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80039b0:	e0ab      	b.n	8003b0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ca      	bne.n	8003952 <HAL_SPI_Transmit+0x120>
 80039bc:	e080      	b.n	8003ac0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0x19a>
 80039c6:	8afb      	ldrh	r3, [r7, #22]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d174      	bne.n	8003ab6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d912      	bls.n	80039fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b02      	subs	r3, #2
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039fa:	e05c      	b.n	8003ab6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a22:	e048      	b.n	8003ab6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d12b      	bne.n	8003a8a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d912      	bls.n	8003a62 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	1c9a      	adds	r2, r3, #2
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b02      	subs	r3, #2
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a60:	e029      	b.n	8003ab6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a88:	e015      	b.n	8003ab6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8a:	f7fd fc69 	bl	8001360 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d803      	bhi.n	8003aa2 <HAL_SPI_Transmit+0x270>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_Transmit+0x276>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ab4:	e029      	b.n	8003b0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1b1      	bne.n	8003a24 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fe0d 	bl	80046e4 <SPI_EndRxTxTransaction>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e003      	b.n	8003b0a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b40:	e11a      	b.n	8003d78 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4a:	d112      	bne.n	8003b72 <HAL_SPI_Receive+0x56>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10e      	bne.n	8003b72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2204      	movs	r2, #4
 8003b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f90e 	bl	8003d8a <HAL_SPI_TransmitReceive>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	e107      	b.n	8003d82 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_SPI_Receive+0x64>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e100      	b.n	8003d82 <HAL_SPI_Receive+0x266>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b88:	f7fd fbea 	bl	8001360 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Receive+0x7e>
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b9e:	e0eb      	b.n	8003d78 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bea:	d908      	bls.n	8003bfe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	e007      	b.n	8003c0e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c16:	d10f      	bne.n	8003c38 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d007      	beq.n	8003c56 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c5e:	d86f      	bhi.n	8003d40 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c60:	e034      	b.n	8003ccc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d117      	bne.n	8003ca0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f103 020c 	add.w	r2, r3, #12
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c9e:	e015      	b.n	8003ccc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca0:	f7fd fb5e 	bl	8001360 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d803      	bhi.n	8003cb8 <HAL_SPI_Receive+0x19c>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Receive+0x1a2>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003cca:	e055      	b.n	8003d78 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1c4      	bne.n	8003c62 <HAL_SPI_Receive+0x146>
 8003cd8:	e038      	b.n	8003d4c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d115      	bne.n	8003d14 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d12:	e015      	b.n	8003d40 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d14:	f7fd fb24 	bl	8001360 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d803      	bhi.n	8003d2c <HAL_SPI_Receive+0x210>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d102      	bne.n	8003d32 <HAL_SPI_Receive+0x216>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d3e:	e01b      	b.n	8003d78 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1c6      	bne.n	8003cda <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fc6f 	bl	8004634 <SPI_EndRxTransaction>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
 8003d6e:	e003      	b.n	8003d78 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08a      	sub	sp, #40	; 0x28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x26>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e20a      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x43c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db8:	f7fd fad2 	bl	8001360 <HAL_GetTick>
 8003dbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dd4:	7efb      	ldrb	r3, [r7, #27]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d00e      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x6e>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de0:	d106      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x66>
 8003dea:	7efb      	ldrb	r3, [r7, #27]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d003      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003df6:	e1e0      	b.n	80041ba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x80>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x80>
 8003e04:	887b      	ldrh	r3, [r7, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e10:	e1d3      	b.n	80041ba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d003      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2205      	movs	r2, #5
 8003e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	887a      	ldrh	r2, [r7, #2]
 8003e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	887a      	ldrh	r2, [r7, #2]
 8003e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e68:	d802      	bhi.n	8003e70 <HAL_SPI_TransmitReceive+0xe6>
 8003e6a:	8a3b      	ldrh	r3, [r7, #16]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d908      	bls.n	8003e82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	e007      	b.n	8003e92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d007      	beq.n	8003eb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eb8:	f240 8081 	bls.w	8003fbe <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x140>
 8003ec4:	8a7b      	ldrh	r3, [r7, #18]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d16d      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eee:	e05a      	b.n	8003fa6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d11b      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x1ac>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x1ac>
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d113      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	881a      	ldrh	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	1c9a      	adds	r2, r3, #2
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d11c      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x1f4>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d016      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f7e:	f7fd f9ef 	bl	8001360 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d80b      	bhi.n	8003fa6 <HAL_SPI_TransmitReceive+0x21c>
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d007      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003fa4:	e109      	b.n	80041ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d19f      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x166>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d199      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x166>
 8003fbc:	e0e3      	b.n	8004186 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x244>
 8003fc6:	8a7b      	ldrh	r3, [r7, #18]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 80cf 	bne.w	800416c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d912      	bls.n	8003ffe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b02      	subs	r3, #2
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ffc:	e0b6      	b.n	800416c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004024:	e0a2      	b.n	800416c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d134      	bne.n	800409e <HAL_SPI_TransmitReceive+0x314>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02f      	beq.n	800409e <HAL_SPI_TransmitReceive+0x314>
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b01      	cmp	r3, #1
 8004042:	d12c      	bne.n	800409e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d912      	bls.n	8004074 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b02      	subs	r3, #2
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004072:	e012      	b.n	800409a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	7812      	ldrb	r2, [r2, #0]
 8004080:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d148      	bne.n	800413e <HAL_SPI_TransmitReceive+0x3b4>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d042      	beq.n	800413e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d923      	bls.n	800410c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	b292      	uxth	r2, r2
 80040d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b02      	subs	r3, #2
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d81f      	bhi.n	800413a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	e016      	b.n	800413a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f103 020c 	add.w	r2, r3, #12
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800413a:	2301      	movs	r3, #1
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800413e:	f7fd f90f 	bl	8001360 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	429a      	cmp	r2, r3
 800414c:	d803      	bhi.n	8004156 <HAL_SPI_TransmitReceive+0x3cc>
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d102      	bne.n	800415c <HAL_SPI_TransmitReceive+0x3d2>
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800416a:	e026      	b.n	80041ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	f47f af57 	bne.w	8004026 <HAL_SPI_TransmitReceive+0x29c>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f af50 	bne.w	8004026 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 faaa 	bl	80046e4 <SPI_EndRxTxTransaction>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b0:	e003      	b.n	80041ba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3728      	adds	r7, #40	; 0x28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10e      	bne.n	8004210 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
    return;
 800420e:	e0ce      	b.n	80043ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_SPI_IRQHandler+0x5e>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
    return;
 800422c:	e0bf      	b.n	80043ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_SPI_IRQHandler+0x7e>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80b0 	beq.w	80043ae <HAL_SPI_IRQHandler+0x1de>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80aa 	beq.w	80043ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d023      	beq.n	80042ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b03      	cmp	r3, #3
 800426e:	d011      	beq.n	8004294 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	e00b      	b.n	80042ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
        return;
 80042aa:	e080      	b.n	80043ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d014      	beq.n	80042e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	f043 0208 	orr.w	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	2b00      	cmp	r3, #0
 800430a:	d04f      	beq.n	80043ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800431a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_SPI_IRQHandler+0x168>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d034      	beq.n	80043a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0203 	bic.w	r2, r2, #3
 8004346:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	2b00      	cmp	r3, #0
 800434e:	d011      	beq.n	8004374 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <HAL_SPI_IRQHandler+0x1e4>)
 8004356:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	4618      	mov	r0, r3
 800435e:	f7fd fa24 	bl	80017aa <HAL_DMA_Abort_IT>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	2b00      	cmp	r3, #0
 800437a:	d016      	beq.n	80043aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <HAL_SPI_IRQHandler+0x1e4>)
 8004382:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	4618      	mov	r0, r3
 800438a:	f7fd fa0e 	bl	80017aa <HAL_DMA_Abort_IT>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80043a0:	e003      	b.n	80043aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f808 	bl	80043b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043a8:	e000      	b.n	80043ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80043aa:	bf00      	nop
    return;
 80043ac:	bf00      	nop
  }
}
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	080043cd 	.word	0x080043cd

080043b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff ffe5 	bl	80043b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004408:	f7fc ffaa 	bl	8001360 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	4413      	add	r3, r2
 8004416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004418:	f7fc ffa2 	bl	8001360 <HAL_GetTick>
 800441c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	015b      	lsls	r3, r3, #5
 8004424:	0d1b      	lsrs	r3, r3, #20
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800442e:	e054      	b.n	80044da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d050      	beq.n	80044da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004438:	f7fc ff92 	bl	8001360 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	429a      	cmp	r2, r3
 8004446:	d902      	bls.n	800444e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d13d      	bne.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800445c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004466:	d111      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004470:	d004      	beq.n	800447c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d107      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004494:	d10f      	bne.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e017      	b.n	80044fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d19b      	bne.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000008 	.word	0x20000008

08004508 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800451a:	f7fc ff21 	bl	8001360 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	4413      	add	r3, r2
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800452a:	f7fc ff19 	bl	8001360 <HAL_GetTick>
 800452e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004538:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	00da      	lsls	r2, r3, #3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	0d1b      	lsrs	r3, r3, #20
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004550:	e060      	b.n	8004614 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004558:	d107      	bne.n	800456a <SPI_WaitFifoStateUntilTimeout+0x62>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004568:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d050      	beq.n	8004614 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004572:	f7fc fef5 	bl	8001360 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	429a      	cmp	r2, r3
 8004580:	d902      	bls.n	8004588 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d13d      	bne.n	8004604 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004596:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a0:	d111      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045aa:	d004      	beq.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b4:	d107      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	d10f      	bne.n	80045f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e010      	b.n	8004626 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3b01      	subs	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d196      	bne.n	8004552 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3728      	adds	r7, #40	; 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000008 	.word	0x20000008

08004634 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004648:	d111      	bne.n	800466e <SPI_EndRxTransaction+0x3a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004652:	d004      	beq.n	800465e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d107      	bne.n	800466e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff febd 	bl	80043f8 <SPI_WaitFlagStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e023      	b.n	80046dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469c:	d11d      	bne.n	80046da <SPI_EndRxTransaction+0xa6>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a6:	d004      	beq.n	80046b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b0:	d113      	bne.n	80046da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff ff22 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e000      	b.n	80046dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ff03 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e027      	b.n	8004768 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff fe68 	bl	80043f8 <SPI_WaitFlagStateUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e014      	b.n	8004768 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fedc 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e000      	b.n	8004768 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e040      	b.n	8004804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc f886 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fd88 	bl	80052cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fbb1 	bl	8004f24 <UART_SetConfig>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e01b      	b.n	8004804 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fe07 	bl	8005410 <UART_CheckIdleState>
 8004802:	4603      	mov	r3, r0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481e:	2b20      	cmp	r3, #32
 8004820:	d165      	bne.n	80048ee <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_Transmit_DMA+0x22>
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e05e      	b.n	80048f0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2221      	movs	r2, #33	; 0x21
 8004854:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	2b00      	cmp	r3, #0
 800485c:	d027      	beq.n	80048ae <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <HAL_UART_Transmit_DMA+0xec>)
 8004864:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a24      	ldr	r2, [pc, #144]	; (80048fc <HAL_UART_Transmit_DMA+0xf0>)
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_UART_Transmit_DMA+0xf4>)
 8004874:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	2200      	movs	r2, #0
 800487c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	4619      	mov	r1, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3328      	adds	r3, #40	; 0x28
 800488e:	461a      	mov	r2, r3
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	f7fc feed 	bl	8001670 <HAL_DMA_Start_IT>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2210      	movs	r2, #16
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e020      	b.n	80048f0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2240      	movs	r2, #64	; 0x40
 80048b4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	623a      	str	r2, [r7, #32]
 80048d8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	; 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	0800574f 	.word	0x0800574f
 80048fc:	080057e3 	.word	0x080057e3
 8004900:	080057ff 	.word	0x080057ff

08004904 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b0ba      	sub	sp, #232	; 0xe8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800492a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800492e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004932:	4013      	ands	r3, r2
 8004934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d115      	bne.n	800496c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00f      	beq.n	800496c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 82ab 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
      }
      return;
 800496a:	e2a5      	b.n	8004eb8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800496c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8117 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004982:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004986:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_UART_IRQHandler+0x298>)
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 810a 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d011      	beq.n	80049c0 <HAL_UART_IRQHandler+0xbc>
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2201      	movs	r2, #1
 80049ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d011      	beq.n	80049f0 <HAL_UART_IRQHandler+0xec>
 80049cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2202      	movs	r2, #2
 80049de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d011      	beq.n	8004a20 <HAL_UART_IRQHandler+0x11c>
 80049fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a16:	f043 0202 	orr.w	r2, r3, #2
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d017      	beq.n	8004a5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00b      	beq.n	8004a5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a52:	f043 0208 	orr.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <HAL_UART_IRQHandler+0x18a>
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00c      	beq.n	8004a8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8211 	beq.w	8004ebc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04f      	beq.n	8004b86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fdcd 	bl	8005686 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d141      	bne.n	8004b7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1d9      	bne.n	8004afa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <HAL_UART_IRQHandler+0x29c>)
 8004b54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc fe25 	bl	80017aa <HAL_DMA_Abort_IT>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b70:	4610      	mov	r0, r2
 8004b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e00f      	b.n	8004b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9be 	bl	8004ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e00b      	b.n	8004b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9ba 	bl	8004ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	e007      	b.n	8004b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9b6 	bl	8004ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004b94:	e192      	b.n	8004ebc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b96:	bf00      	nop
    return;
 8004b98:	e190      	b.n	8004ebc <HAL_UART_IRQHandler+0x5b8>
 8004b9a:	bf00      	nop
 8004b9c:	04000120 	.word	0x04000120
 8004ba0:	0800587d 	.word	0x0800587d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 814b 	bne.w	8004e44 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8144 	beq.w	8004e44 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 813d 	beq.w	8004e44 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	f040 80b5 	bne.w	8004d4c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8164 	beq.w	8004ec0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f080 815c 	bcs.w	8004ec0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	f000 8086 	beq.w	8004d2a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1da      	bne.n	8004c1e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3308      	adds	r3, #8
 8004c88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e1      	bne.n	8004c68 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfa:	f023 0310 	bic.w	r3, r3, #16
 8004cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e4      	bne.n	8004cea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fc fd02 	bl	800172e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8e1 	bl	8004f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d4a:	e0b9      	b.n	8004ec0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80ab 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80a6 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e4      	bne.n	8004d78 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e3      	bne.n	8004dae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0310 	bic.w	r3, r3, #16
 8004e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	69b9      	ldr	r1, [r7, #24]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e4      	bne.n	8004dfa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f865 	bl	8004f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e42:	e03f      	b.n	8004ec4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_UART_IRQHandler+0x56a>
 8004e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fd48 	bl	80058fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e6c:	e02d      	b.n	8004eca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00e      	beq.n	8004e98 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01c      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
    }
    return;
 8004e96:	e017      	b.n	8004ec8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d012      	beq.n	8004eca <HAL_UART_IRQHandler+0x5c6>
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fcf9 	bl	80058a8 <UART_EndTransmit_IT>
    return;
 8004eb6:	e008      	b.n	8004eca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004eb8:	bf00      	nop
 8004eba:	e006      	b.n	8004eca <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ebc:	bf00      	nop
 8004ebe:	e004      	b.n	8004eca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ec0:	bf00      	nop
 8004ec2:	e002      	b.n	8004eca <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ec8:	bf00      	nop
  }

}
 8004eca:	37e8      	adds	r7, #232	; 0xe8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b92      	ldr	r3, [pc, #584]	; (8005198 <UART_SetConfig+0x274>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	6979      	ldr	r1, [r7, #20]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a80      	ldr	r2, [pc, #512]	; (800519c <UART_SetConfig+0x278>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d120      	bne.n	8004fe2 <UART_SetConfig+0xbe>
 8004fa0:	4b7f      	ldr	r3, [pc, #508]	; (80051a0 <UART_SetConfig+0x27c>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d817      	bhi.n	8004fdc <UART_SetConfig+0xb8>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0x90>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fd1 	.word	0x08004fd1
 8004fbc:	08004fd7 	.word	0x08004fd7
 8004fc0:	08004fcb 	.word	0x08004fcb
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e0b5      	b.n	8005136 <UART_SetConfig+0x212>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e0b2      	b.n	8005136 <UART_SetConfig+0x212>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e0af      	b.n	8005136 <UART_SetConfig+0x212>
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e0ac      	b.n	8005136 <UART_SetConfig+0x212>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e0a9      	b.n	8005136 <UART_SetConfig+0x212>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6f      	ldr	r2, [pc, #444]	; (80051a4 <UART_SetConfig+0x280>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d124      	bne.n	8005036 <UART_SetConfig+0x112>
 8004fec:	4b6c      	ldr	r3, [pc, #432]	; (80051a0 <UART_SetConfig+0x27c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ff8:	d011      	beq.n	800501e <UART_SetConfig+0xfa>
 8004ffa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ffe:	d817      	bhi.n	8005030 <UART_SetConfig+0x10c>
 8005000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005004:	d011      	beq.n	800502a <UART_SetConfig+0x106>
 8005006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800500a:	d811      	bhi.n	8005030 <UART_SetConfig+0x10c>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <UART_SetConfig+0xf4>
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d006      	beq.n	8005024 <UART_SetConfig+0x100>
 8005016:	e00b      	b.n	8005030 <UART_SetConfig+0x10c>
 8005018:	2300      	movs	r3, #0
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e08b      	b.n	8005136 <UART_SetConfig+0x212>
 800501e:	2302      	movs	r3, #2
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e088      	b.n	8005136 <UART_SetConfig+0x212>
 8005024:	2304      	movs	r3, #4
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e085      	b.n	8005136 <UART_SetConfig+0x212>
 800502a:	2308      	movs	r3, #8
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e082      	b.n	8005136 <UART_SetConfig+0x212>
 8005030:	2310      	movs	r3, #16
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e07f      	b.n	8005136 <UART_SetConfig+0x212>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5b      	ldr	r2, [pc, #364]	; (80051a8 <UART_SetConfig+0x284>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d124      	bne.n	800508a <UART_SetConfig+0x166>
 8005040:	4b57      	ldr	r3, [pc, #348]	; (80051a0 <UART_SetConfig+0x27c>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005048:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800504c:	d011      	beq.n	8005072 <UART_SetConfig+0x14e>
 800504e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005052:	d817      	bhi.n	8005084 <UART_SetConfig+0x160>
 8005054:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005058:	d011      	beq.n	800507e <UART_SetConfig+0x15a>
 800505a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800505e:	d811      	bhi.n	8005084 <UART_SetConfig+0x160>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <UART_SetConfig+0x148>
 8005064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005068:	d006      	beq.n	8005078 <UART_SetConfig+0x154>
 800506a:	e00b      	b.n	8005084 <UART_SetConfig+0x160>
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e061      	b.n	8005136 <UART_SetConfig+0x212>
 8005072:	2302      	movs	r3, #2
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e05e      	b.n	8005136 <UART_SetConfig+0x212>
 8005078:	2304      	movs	r3, #4
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e05b      	b.n	8005136 <UART_SetConfig+0x212>
 800507e:	2308      	movs	r3, #8
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e058      	b.n	8005136 <UART_SetConfig+0x212>
 8005084:	2310      	movs	r3, #16
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e055      	b.n	8005136 <UART_SetConfig+0x212>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a47      	ldr	r2, [pc, #284]	; (80051ac <UART_SetConfig+0x288>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d124      	bne.n	80050de <UART_SetConfig+0x1ba>
 8005094:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <UART_SetConfig+0x27c>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800509c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050a0:	d011      	beq.n	80050c6 <UART_SetConfig+0x1a2>
 80050a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050a6:	d817      	bhi.n	80050d8 <UART_SetConfig+0x1b4>
 80050a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ac:	d011      	beq.n	80050d2 <UART_SetConfig+0x1ae>
 80050ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050b2:	d811      	bhi.n	80050d8 <UART_SetConfig+0x1b4>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <UART_SetConfig+0x19c>
 80050b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x1a8>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x1b4>
 80050c0:	2300      	movs	r3, #0
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e037      	b.n	8005136 <UART_SetConfig+0x212>
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e034      	b.n	8005136 <UART_SetConfig+0x212>
 80050cc:	2304      	movs	r3, #4
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e031      	b.n	8005136 <UART_SetConfig+0x212>
 80050d2:	2308      	movs	r3, #8
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e02e      	b.n	8005136 <UART_SetConfig+0x212>
 80050d8:	2310      	movs	r3, #16
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e02b      	b.n	8005136 <UART_SetConfig+0x212>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <UART_SetConfig+0x28c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d124      	bne.n	8005132 <UART_SetConfig+0x20e>
 80050e8:	4b2d      	ldr	r3, [pc, #180]	; (80051a0 <UART_SetConfig+0x27c>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80050f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050f4:	d011      	beq.n	800511a <UART_SetConfig+0x1f6>
 80050f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050fa:	d817      	bhi.n	800512c <UART_SetConfig+0x208>
 80050fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005100:	d011      	beq.n	8005126 <UART_SetConfig+0x202>
 8005102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005106:	d811      	bhi.n	800512c <UART_SetConfig+0x208>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <UART_SetConfig+0x1f0>
 800510c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005110:	d006      	beq.n	8005120 <UART_SetConfig+0x1fc>
 8005112:	e00b      	b.n	800512c <UART_SetConfig+0x208>
 8005114:	2300      	movs	r3, #0
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e00d      	b.n	8005136 <UART_SetConfig+0x212>
 800511a:	2302      	movs	r3, #2
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e00a      	b.n	8005136 <UART_SetConfig+0x212>
 8005120:	2304      	movs	r3, #4
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e007      	b.n	8005136 <UART_SetConfig+0x212>
 8005126:	2308      	movs	r3, #8
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e004      	b.n	8005136 <UART_SetConfig+0x212>
 800512c:	2310      	movs	r3, #16
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e001      	b.n	8005136 <UART_SetConfig+0x212>
 8005132:	2310      	movs	r3, #16
 8005134:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513e:	d16b      	bne.n	8005218 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005140:	7ffb      	ldrb	r3, [r7, #31]
 8005142:	2b08      	cmp	r3, #8
 8005144:	d838      	bhi.n	80051b8 <UART_SetConfig+0x294>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x228>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005171 	.word	0x08005171
 8005150:	08005179 	.word	0x08005179
 8005154:	08005181 	.word	0x08005181
 8005158:	080051b9 	.word	0x080051b9
 800515c:	08005187 	.word	0x08005187
 8005160:	080051b9 	.word	0x080051b9
 8005164:	080051b9 	.word	0x080051b9
 8005168:	080051b9 	.word	0x080051b9
 800516c:	0800518f 	.word	0x0800518f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fe f852 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8005174:	61b8      	str	r0, [r7, #24]
        break;
 8005176:	e024      	b.n	80051c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7fe f870 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 800517c:	61b8      	str	r0, [r7, #24]
        break;
 800517e:	e020      	b.n	80051c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <UART_SetConfig+0x290>)
 8005182:	61bb      	str	r3, [r7, #24]
        break;
 8005184:	e01d      	b.n	80051c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005186:	f7fd ffe7 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 800518a:	61b8      	str	r0, [r7, #24]
        break;
 800518c:	e019      	b.n	80051c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	61bb      	str	r3, [r7, #24]
        break;
 8005194:	e015      	b.n	80051c2 <UART_SetConfig+0x29e>
 8005196:	bf00      	nop
 8005198:	efff69f3 	.word	0xefff69f3
 800519c:	40013800 	.word	0x40013800
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40004400 	.word	0x40004400
 80051a8:	40004800 	.word	0x40004800
 80051ac:	40004c00 	.word	0x40004c00
 80051b0:	40005000 	.word	0x40005000
 80051b4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	77bb      	strb	r3, [r7, #30]
        break;
 80051c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d073      	beq.n	80052b0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	005a      	lsls	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	441a      	add	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b0f      	cmp	r3, #15
 80051e2:	d916      	bls.n	8005212 <UART_SetConfig+0x2ee>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ea:	d212      	bcs.n	8005212 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f023 030f 	bic.w	r3, r3, #15
 80051f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	b29a      	uxth	r2, r3
 8005202:	89fb      	ldrh	r3, [r7, #14]
 8005204:	4313      	orrs	r3, r2
 8005206:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	89fa      	ldrh	r2, [r7, #14]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	e04e      	b.n	80052b0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	77bb      	strb	r3, [r7, #30]
 8005216:	e04b      	b.n	80052b0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005218:	7ffb      	ldrb	r3, [r7, #31]
 800521a:	2b08      	cmp	r3, #8
 800521c:	d827      	bhi.n	800526e <UART_SetConfig+0x34a>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x300>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005249 	.word	0x08005249
 8005228:	08005251 	.word	0x08005251
 800522c:	08005259 	.word	0x08005259
 8005230:	0800526f 	.word	0x0800526f
 8005234:	0800525f 	.word	0x0800525f
 8005238:	0800526f 	.word	0x0800526f
 800523c:	0800526f 	.word	0x0800526f
 8005240:	0800526f 	.word	0x0800526f
 8005244:	08005267 	.word	0x08005267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7fd ffe6 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 800524c:	61b8      	str	r0, [r7, #24]
        break;
 800524e:	e013      	b.n	8005278 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005250:	f7fe f804 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8005254:	61b8      	str	r0, [r7, #24]
        break;
 8005256:	e00f      	b.n	8005278 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005258:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <UART_SetConfig+0x3a4>)
 800525a:	61bb      	str	r3, [r7, #24]
        break;
 800525c:	e00c      	b.n	8005278 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525e:	f7fd ff7b 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8005262:	61b8      	str	r0, [r7, #24]
        break;
 8005264:	e008      	b.n	8005278 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800526a:	61bb      	str	r3, [r7, #24]
        break;
 800526c:	e004      	b.n	8005278 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	77bb      	strb	r3, [r7, #30]
        break;
 8005276:	bf00      	nop
    }

    if (pclk != 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	085a      	lsrs	r2, r3, #1
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b0f      	cmp	r3, #15
 8005296:	d909      	bls.n	80052ac <UART_SetConfig+0x388>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d205      	bcs.n	80052ac <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e001      	b.n	80052b0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	007a1200 	.word	0x007a1200

080052cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ca:	d10a      	bne.n	80053e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b098      	sub	sp, #96	; 0x60
 8005414:	af02      	add	r7, sp, #8
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005420:	f7fb ff9e 	bl	8001360 <HAL_GetTick>
 8005424:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d12e      	bne.n	8005492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f88c 	bl	8005560 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d021      	beq.n	8005492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005462:	653b      	str	r3, [r7, #80]	; 0x50
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546c:	647b      	str	r3, [r7, #68]	; 0x44
 800546e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800547a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e062      	b.n	8005558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b04      	cmp	r3, #4
 800549e:	d149      	bne.n	8005534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f856 	bl	8005560 <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d03c      	beq.n	8005534 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	623b      	str	r3, [r7, #32]
   return(result);
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30
 80054da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550c:	61fa      	str	r2, [r7, #28]
 800550e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	617b      	str	r3, [r7, #20]
   return(result);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e011      	b.n	8005558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3758      	adds	r7, #88	; 0x58
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005570:	e04f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d04b      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557a:	f7fb fef1 	bl	8001360 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <UART_WaitOnFlagUntilTimeout+0x30>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e04e      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d037      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d034      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d031      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d110      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f85e 	bl	8005686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2208      	movs	r2, #8
 80055ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e029      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d111      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f844 	bl	8005686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e00f      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d0a0      	beq.n	8005572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800563a:	b480      	push	{r7}
 800563c:	b089      	sub	sp, #36	; 0x24
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6979      	ldr	r1, [r7, #20]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	613b      	str	r3, [r7, #16]
   return(result);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e6      	bne.n	8005642 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800567a:	bf00      	nop
 800567c:	3724      	adds	r7, #36	; 0x24
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005686:	b480      	push	{r7}
 8005688:	b095      	sub	sp, #84	; 0x54
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ac:	643b      	str	r3, [r7, #64]	; 0x40
 80056ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e6      	bne.n	800568e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d118      	bne.n	800572e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	60bb      	str	r3, [r7, #8]
   return(result);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0310 	bic.w	r3, r3, #16
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6979      	ldr	r1, [r7, #20]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	613b      	str	r3, [r7, #16]
   return(result);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005742:	bf00      	nop
 8005744:	3754      	adds	r7, #84	; 0x54
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b090      	sub	sp, #64	; 0x40
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b20      	cmp	r3, #32
 8005762:	d037      	beq.n	80057d4 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	2200      	movs	r2, #0
 8005768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800576c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	623b      	str	r3, [r7, #32]
   return(result);
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005782:	63bb      	str	r3, [r7, #56]	; 0x38
 8005784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3308      	adds	r3, #8
 800578a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578c:	633a      	str	r2, [r7, #48]	; 0x30
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
 80057b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69b9      	ldr	r1, [r7, #24]
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	617b      	str	r3, [r7, #20]
   return(result);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057d2:	e002      	b.n	80057da <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80057d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057d6:	f7ff fb7b 	bl	8004ed0 <HAL_UART_TxCpltCallback>
}
 80057da:	bf00      	nop
 80057dc:	3740      	adds	r7, #64	; 0x40
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fb77 	bl	8004ee4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005810:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005818:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005824:	2b80      	cmp	r3, #128	; 0x80
 8005826:	d109      	bne.n	800583c <UART_DMAError+0x3e>
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b21      	cmp	r3, #33	; 0x21
 800582c:	d106      	bne.n	800583c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f7ff feff 	bl	800563a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d109      	bne.n	800585e <UART_DMAError+0x60>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b22      	cmp	r3, #34	; 0x22
 800584e:	d106      	bne.n	800585e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2200      	movs	r2, #0
 8005854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005858:	6978      	ldr	r0, [r7, #20]
 800585a:	f7ff ff14 	bl	8005686 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	f043 0210 	orr.w	r2, r3, #16
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800586e:	6978      	ldr	r0, [r7, #20]
 8005870:	f7ff fb42 	bl	8004ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005874:	bf00      	nop
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fb2c 	bl	8004ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6979      	ldr	r1, [r7, #20]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	613b      	str	r3, [r7, #16]
   return(result);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e6      	bne.n	80058b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff faee 	bl	8004ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <memset>:
 8005910:	4402      	add	r2, r0
 8005912:	4603      	mov	r3, r0
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	f803 1b01 	strb.w	r1, [r3], #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4d0d      	ldr	r5, [pc, #52]	; (8005958 <__libc_init_array+0x38>)
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	2600      	movs	r6, #0
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	4d0b      	ldr	r5, [pc, #44]	; (8005960 <__libc_init_array+0x40>)
 8005932:	4c0c      	ldr	r4, [pc, #48]	; (8005964 <__libc_init_array+0x44>)
 8005934:	f000 f818 	bl	8005968 <_init>
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	2600      	movs	r6, #0
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f855 3b04 	ldr.w	r3, [r5], #4
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	080059c8 	.word	0x080059c8
 800595c:	080059c8 	.word	0x080059c8
 8005960:	080059c8 	.word	0x080059c8
 8005964:	080059cc 	.word	0x080059cc

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
